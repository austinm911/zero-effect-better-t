/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as LayoutRouteRouteImport } from './routes/_layout/route'
import { Route as LayoutIndexRouteImport } from './routes/_layout/index'
import { ServerRoute as ApiSplatServerRouteImport } from './routes/api/$'

const rootServerRouteImport = createServerRootRoute()

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRouteRoute = LayoutRouteRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRouteRoute,
} as any)
const ApiSplatServerRoute = ApiSplatServerRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/': typeof LayoutIndexRoute
}
export interface FileRoutesByTo {
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/': typeof LayoutIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRouteRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/_layout/': typeof LayoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/dashboard' | '/login' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/dashboard' | '/login' | '/'
  id: '__root__' | '/_layout' | '/dashboard' | '/login' | '/_layout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRouteRoute: typeof LayoutRouteRouteWithChildren
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
}
export interface FileServerRoutesByFullPath {
  '/api/$': typeof ApiSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/$': typeof ApiSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/$': typeof ApiSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/$'
  id: '__root__' | '/api/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiSplatServerRoute: typeof ApiSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface LayoutRouteRouteChildren {
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteRouteChildren: LayoutRouteRouteChildren = {
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteRouteWithChildren = LayoutRouteRoute._addFileChildren(
  LayoutRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  LayoutRouteRoute: LayoutRouteRouteWithChildren,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiSplatServerRoute: ApiSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
